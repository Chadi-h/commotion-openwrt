include /lib/network

#DEBUG="echo"

#===  FUNCTION  ================================================================
#          NAME:  unset_olsrd_if
#   DESCRIPTION:  Unsets the interface stanza for the olsrd config
#    PARAMETERS:  config name of the interface to remove
#       RETURNS:  0 on success
#===============================================================================

unset_olsrd_if() {
  local config="$1"
  
  config_cb() {
    local type="$1"
    local name="$2"

    case $type in
      Interface)
        local oldifaces="$(uci_get olsrd "$name" interface "")"
        local newifaces=
        for dev in $(sort_list "$oldifaces" "$config"); do
          list_remove newifaces "$dev"
        done
        uci_set olsrd "$name" interface "$newifaces"
        ;;
    esac
  }
  config_load olsrd

  uci_commit olsrd && return 0
}

#===  FUNCTION  ================================================================
#          NAME:  set_olsrd_if
#   DESCRIPTION:  Sets the interface stanza for the olsrd config
#    PARAMETERS:  config name of the interface to add
#       RETURNS:  0 on success
#===============================================================================

set_olsrd_if() {
  local config="$1"

  config_cb() {
    local type="$1"
    local name="$2"

    case $type in
      Interface)
        local oldifaces="$(uci_get olsrd "$name" interface "")"
        local newifaces=
        for dev in $(sort_list "$oldifaces" "$config"); do
          append newifaces "$dev"
        done
        uci_set olsrd "$name" interface "$newifaces"
        ;;
    esac
  }
  config_load olsrd

  uci_commit olsrd && return 0
}

#===  FUNCTION  ================================================================
#          NAME:  unset_olsrd_p2pif
#   DESCRIPTION:  Unsets the p2p plugin stanza for the olsrd config
#    PARAMETERS:  config name of the interface to remove
#       RETURNS:  0 on success
#===============================================================================

unset_olsrd_p2pif() {
  local config="$1"
  
  config_cb() {
    local type="$1"
    local name="$2"

    case $type in
      LoadPlugin)
        case "$(uci_get olsrd "$name" library)" in
          olsrd_p2pd.so.*)
            local oldconfigs="$(uci_get olsrd "$name" NonOlsrIf "")"
            local newconfigs=
            for dev in $(sort_list "$oldconfigs" "$config"); do
              list_remove newconfigs "$dev"
            done
            uci_set olsrd "$name" NonOlsrIf "$newconfigs"
            ;;
        esac
      ;;
    esac
  }
  config_load olsrd

  uci_commit olsrd && return 0
}

#===  FUNCTION  ================================================================
#          NAME:  set_olsrd_p2pif
#   DESCRIPTION:  Sets the p2p plugin stanza for the olsrd config
#    PARAMETERS:  config name of the interface to add
#       RETURNS:  0 on success
#===============================================================================

set_olsrd_p2pif() {
  local config="$1"
  
  config_cb() {
    local type="$1"
    local name="$2"

    case $type in
      LoadPlugin)
        case "$(uci_get olsrd "$name" library)" in
          olsrd_p2pd.so.*)
            local oldconfigs="$(uci_get olsrd "$name" NonOlsrIf "")"
            local newconfigs=
            for dev in $(sort_list "$oldconfigs" "$config"); do
              append newconfigs "$dev"
            done
            uci_set olsrd "$name" NonOlsrIf "$newconfigs"
            ;;
        esac
      ;;
    esac
  }
  config_load olsrd

  uci_commit olsrd && return 0
}

#===  FUNCTION  ================================================================
#          NAME:  unset_olsrd_dnssrv
#   DESCRIPTION:  Unsets the dns-server plugin option for the olsrd config
#    PARAMETERS:  IP address of the interface to remove
#       RETURNS:  0 on success
#===============================================================================

unset_olsrd_dnssrv() {
  local ip4addr="$1"
  
  config_cb() {
    local type="$1"
    local name="$2"

    case $type in
      LoadPlugin)
        case "$(uci_get olsrd "$name" dns_server "")" in
          "$ip4addr")
            uci_remove olsrd "$name" dns_server
            ;;
        esac
      ;;
    esac
  }
  config_load olsrd

  uci_commit olsrd && return 0
}

#===  FUNCTION  ================================================================
#          NAME:  set_olsrd_dnssrv
#   DESCRIPTION:  Sets the dns-server plugin option for the olsrd config
#    PARAMETERS:  IP address of the interface to add
#       RETURNS:  0 on success
#===============================================================================

set_olsrd_dnssrv() {
  local ipv4addr="$1"
  
  config_cb() {
    local type="$1"
    local name="$2"

    case $type in
      LoadPlugin)
        case "$(uci_get olsrd "$name" library "")" in
          olsrd_nameservice.so.*)
            uci_set olsrd "$name" dns_server "$ipv4addr"
            ;;
        esac
      ;;
    esac
  }
  config_load olsrd

  uci_commit olsrd && return 0
}

#===  FUNCTION  ================================================================
#          NAME:  unset_olsrd_hna4
#   DESCRIPTION:  Unset HNA4 stanza in olsrd config
#    PARAMETERS:  1; config name of interface to unset
#       RETURNS:  0 on success
#===============================================================================

unset_olsrd_hna4() {
  local config=$1
  
  uci_remove olsrd "$config"
        
  uci_commit olsrd && return 0
}

#===  FUNCTION  ================================================================
#          NAME:  set_olsrd_hna4
#   DESCRIPTION:  Set HNA4 stanza in olsrd config
#    PARAMETERS:  3; IPv4 address, netmask to set, and config
#       RETURNS:  0 on success
#===============================================================================

set_olsrd_hna4() {
  local ipv4addr=$1
  local netmask=$2
  local config=$3

  uci_add olsrd Hna4 "$config" 
  uci_set olsrd "$config" netaddr "$ipv4addr"
  uci_set olsrd "$config" netmask "$netmask"

  uci_commit olsrd && return 0
} 

#===  FUNCTION  ================================================================
#          NAME:  unset_olsrd_secure
#   DESCRIPTION:  Unset olsrd_secure stanza in olsrd config
#    PARAMETERS:  None
#       RETURNS:  0 on success
#===============================================================================

unset_olsrd_secure() {

  config_cb() {
    local type="$1"
    local name="$2"

    case $type in
      LoadPlugin)
        case "$(uci_get olsrd "$name" library "")" in
          olsrd_secure.so.*)
            uci_remove olsrd "$name"
            ;;
        esac
      ;;
    esac
  }
  config_load olsrd

  uci_commit olsrd && return 0
}

#===  FUNCTION  ================================================================
#          NAME:  set_olsrd_secure
#   DESCRIPTION:  Set olsrd_secure stanza in olsrd config
#    PARAMETERS:  None
#       RETURNS:  0 on success
#===============================================================================

set_olsrd_secure() {

  config_cb() {
    local type="$1"
    local name="$2"

    case $type in
      LoadPlugin)
        case "$(uci_get olsrd "$name" library "")" in
          olsrd_secure.so.*)
            uci_set olsrd "$name" Keyfile "/etc/olsrd.d/commotion.key"
            ;;
        esac
      ;;
    esac
  }
  config_load olsrd

  [ -f /etc/olsrd.d/commotion.key ] && echo "$(uci_get mesh @network[0] olsrd_key)" > /etc/olsrd.d/commotion.key

  uci_commit olsrd && return 0
} 

[ -f "/etc/config/olsrd" ] && [ "$(uci_get network "$INTERFACE" routing)" = "olsrd" ] && {
case $PROTO in
  meshif)
    [ "$RESET" = 1 ] && {
      case $ACTION in
        postup)
          $DEBUG set_olsrd_if $INTERFACE
          #$DEBUG set_olsrd_dnssrv "$(uci_get_state network "$INTERFACE" ipaddr)"
          [ "$(uci_get network "$INTERFACE" secure 0)" = "1" ] && \
           $DEBUG set_olsrd_secure $INTERFACE
        ;;
      esac
    }
   ;;
  apif)
    [ "$RESET" = 1 ] && {
      case $ACTION in
        postup)
          eval `ipcalc.sh "$(uci_get_state network "$INTERFACE" ipaddr)" "$(uci_get_state network "$INTERFACE" netmask)"`
          $DEBUG set_olsrd_hna4  $NETWORK $NETMASK $INTERFACE
          $DEBUG set_olsrd_p2pif $INTERFACE
        ;;
      esac
    }
  ;;
  plugif)
    case $ACTION in
      postup)
        [ "$(uci_get_state network "$INTERFACE" plug)" = 0 ] || {
            eval `ipcalc.sh "$(uci_get_state network "$INTERFACE" ipaddr)" "$(uci_get_state network "$INTERFACE" netmask)"`
            $DEBUG set_olsrd_hna4  $NETWORK $NETMASK $INTERFACE
            $DEBUG set_olsrd_p2pif $INTERFACE
        }
      ;;
      predown)
        $DEBUG unset_olsrd_hna4 $INTERFACE
        $DEBUG unset_olsrd_p2pif $INTERFACE
      ;; 
    esac
  ;;
esac
}
