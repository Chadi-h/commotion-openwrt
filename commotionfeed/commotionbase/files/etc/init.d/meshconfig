#!/bin/sh /etc/rc.common

. /etc/functions.sh
. /lib/functions/meshconfig.sh

#DEBUG=echo
START=38
STOP=91
EXTRA_COMMANDS="configure upgrade cron"
EXTRA_HELP=<<EOF
        configure Set mesh configuration defaults.
        upgrade Run remote system upgrades.
EOF

apply_mesh_defaults() {
  local network="$1" 
  local role="$2"

  touch /etc/config/mesh
  cd /etc/meshconfig || return 1
	[ -f "$network/$role" ] || return 2
	mkdir -p /tmp/.uci
	. "./$network/$role"

  $DEBUG uci_set system @system[0] community "$network"
  $DEBUG uci_set system @system[0] role "$role"

	uci_commit
}

apply_wireless_defaults() {
  local n=0
  
  # Clear out any existing wireless interfaces
  $DEBUG uci_remove wireless @wifi-iface[]

  config_cb() {
    local type="$1"
    local name="$2"

    case "$type" in
      "interface")
        case "$(uci_get network "$name" proto)" in
          meshif)
            $DEBUG uci_add wireless wifi-iface
            $DEBUG uci_set wireless @wifi-iface[-1] network "$name"
            $DEBUG uci_set wireless @wifi-iface[-1] mode adhoc
            $DEBUG uci_set wireless @wifi-iface[-1] ssid "CommotionSetup-$name"
            ;;
          apif)
            $DEBUG uci_add wireless wifi-iface
            $DEBUG uci_set wireless @wifi-iface[-1] network "$name"
            $DEBUG uci_set wireless @wifi-iface[-1] mode ap
            $DEBUG uci_set wireless @wifi-iface[-1] ssid "CommotionSetup-$name"
            ;;
        esac
      ;;
    esac
  }
  config_load network
  
  reset_cb

  config_cb() {
    local type="$1"
    local name="$2"
    
    case "$type" in
      "wifi-device")
        $DEBUG uci_set wireless "$name" disabled 0
        $DEBUG uci_set wireless @wifi-iface[$n] device "$name"
        n=$(($n+1))
        lastdev="$name"
        ;;
      "wifi-iface")
        [[ -z $(uci_get wireless "$name" device) ]] && \
        $DEBUG uci_set wireless "$name" device "$lastdev"
        ;;
    esac
  }
  config_load wireless

  uci_commit wireless
}

apply_hostname_defaults() {
  local mac=$1
  
  local hostname="$(uci_get mesh @network[0] basename "commotion")-$(uci_get system @system[0] location $(uci_get system @system[0] nodeid))"
   
  echo "$hostname" > /proc/sys/kernel/hostname
  $DEBUG uci_set system @system[0] hostname "$hostname"
  $DEBUG uci_commit system
}


boot() {
  grep -qs config /etc/config/mesh || { 
    $DEBUG apply_mesh_defaults "$(uci_get system @system[0] community "default")" "$(uci_get system @system[0] role "default")"
    logger -t meshconfig "Applied mesh defaults."
  }

  case "$(uci_get wireless @wifi-device[0] disabled 1)" in
    1)
      case "$(uci_get wireless @wifi-iface[0] ssid "OpenWrt")" in
        "OpenWrt")
          rm -f /etc/config/wireless
          $DEBUG /sbin/wifi detect > /etc/config/wireless
          $DEBUG apply_wireless_defaults
          logger -t meshconfig "Applied wireless defaults."
        ;;
      esac
    ;;
  esac

  case "$(uci_get system @system[0] nodeid "blank")" in
    "blank")
      local getid=$(uci_get mesh @network[0] idgen "default")
      local id=$(get_id_"$getid")
      $DEBUG uci_set system @system[0] nodeid "$id"
      logger -t meshconfig "Generated Node ID $id via method $getid"
    ;;
  esac
  
  case "$(uci_get system @system[0] homepage "blank")" in
    "blank")
      local homepage=$(uci_get mesh @network[0] homepage "http://commotionwireless.net")
      $DEBUG uci_set system @system[0] homepage "$homepage"
      logger -t meshconfig "Applied homepage defaults."
    ;;
  esac
 
  case "$(uci_get system @system[0] hostname "OpenWrt")" in
    "OpenWrt")
      $DEBUG apply_hostname_defaults "$(uci_get wireless @wifi-device[0] macaddr)"
      logger -t meshconfig "Applied hostname defaults."
    ;;
  esac
}

start() {
  boot
}   

restart() {
  trap '' TERM
  stop "$@"

  config_cb() {
    local type="$1"
    local name="$2"

    case "$type" in
      "interface")
        case "$(uci_get network "$name" proto)" in
          meshif)
            $DEBUG uci_set network "$name" reset 1
            ;;
          apif)
            $DEBUG uci_set network "$name" reset 1
            ;;
        esac
      ;;
    esac
  }
  config_load network
  $DEBUG uci_commit network

  $DEBUG apply_hostname_defaults "$(uci_get wireless @wifi-device[0] macaddr)"

  start "$@"
}

configure() {
  $DEBUG apply_mesh_defaults "$1" "$2"
}

upgrade() {
  local args
  [ -z "$(uci_get system @upgrade[0] noverify 0)" ] || append args "-v"
  [ -z "$(uci_get system @upgrade[0] nobackup 0)" ] || append args "-n"
  $DEBUG remote-update "$args" && return 0
}

cron() {
  [ -z "$(uci_get system @upgrade[0] noverify 0)" ] || upgrade
  return 0
} 
  
