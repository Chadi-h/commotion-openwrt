Index: ifaces.lua
===================================================================
--- ifaces.lua	(revision 7368)
+++ ifaces.lua	(working copy)
@@ -34,6 +34,7 @@
 local has_6to4   = fs.access("/lib/network/6to4.sh")
 local has_relay  = fs.access("/lib/network/relay.sh")
 local has_ahcp   = fs.access("/lib/network/ahcp.sh")
+local has_commotion   = fs.access("/lib/network/mesh.sh")
 
 m = Map("network", translate("Interfaces") .. " - " .. arg[1]:upper(), translate("On this page you can configure the network interfaces. You can bridge several interfaces by ticking the \"bridge interfaces\" field and enter the names of several network interfaces separated by spaces. You can also use <abbr title=\"Virtual Local Area Network\">VLAN</abbr> notation <samp>INTERFACE.VLANNR</samp> (<abbr title=\"for example\">e.g.</abbr>: <samp>eth0.1</samp>)."))
 m:chain("wireless")
@@ -70,6 +71,7 @@
 if has_6in4 or has_6to4 then s:tab("tunnel", translate("Tunnel Settings")) end
 if has_relay then s:tab("relay", translate("Relay Settings")) end
 if has_ahcp then s:tab("ahcp", translate("AHCP Settings")) end
+if has_commotion then s:tab("commotion", translate("Commotion Settings")) end
 s:tab("physical", translate("Physical Settings"))
 if has_firewall then s:tab("firewall", translate("Firewall Settings")) end
 
@@ -97,6 +99,9 @@
 if has_6to4  then p:value("6to4",  "6to4")    end
 if has_relay then p:value("relay", "Relay")   end
 if has_ahcp  then p:value("ahcp",  "AHCP")    end
+if has_commotion  then p:value("meshif",  "Auto Mesh")    end
+if has_commotion  then p:value("apif",  "Auto AP")    end
+if has_commotion  then p:value("plugif",  "Auto Pluggable")    end
 p:value("none", translate("none"))
 
 if not ( has_pppd and has_pppoe and has_pppoa and has_3g and has_pptp ) then
@@ -129,6 +134,9 @@
 ifname_single:depends({ type = "", proto = "pppoe"  })
 ifname_single:depends({ type = "", proto = "pppoa"  })
 ifname_single:depends({ type = "", proto = "ahcp"   })
+ifname_single:depends({ type = "", proto = "meshif"   })
+ifname_single:depends({ type = "", proto = "apif"   })
+ifname_single:depends({ type = "", proto = "plugif"   })
 ifname_single:depends({ type = "", proto = "none"   })
 
 function ifname_single.cfgvalue(self, s)
@@ -202,11 +210,15 @@
 ipaddr.optional = true
 ipaddr.datatype = "ip4addr"
 ipaddr:depends("proto", "static")
+ipaddr:depends("proto", "meshif")
+ipaddr:depends("proto", "apif")
 
 nm = s:taboption("general", Value, "netmask", translate("<abbr title=\"Internet Protocol Version 4\">IPv4</abbr>-Netmask"))
 nm.optional = true
 nm.datatype = "ip4addr"
 nm:depends("proto", "static")
+nm:depends("proto", "meshif")
+nm:depends("proto", "apif")
 nm:value("255.255.255.0")
 nm:value("255.255.0.0")
 nm:value("255.0.0.0")
@@ -215,11 +227,15 @@
 gw.optional = true
 gw.datatype = "ip4addr"
 gw:depends("proto", "static")
+gw:depends("proto", "meshif")
+gw:depends("proto", "apif")
 
 bcast = s:taboption("general", Value, "broadcast", translate("<abbr title=\"Internet Protocol Version 4\">IPv4</abbr>-Broadcast"))
 bcast.optional = true
 bcast.datatype = "ip4addr"
 bcast:depends("proto", "static")
+bcast:depends("proto", "meshif")
+bcast:depends("proto", "apif")
 
 if has_ipv6 then
 	ip6addr = s:taboption("ipv6", Value, "ip6addr", translate("<abbr title=\"Internet Protocol Version 6\">IPv6</abbr>-Address"), translate("<abbr title=\"Classless Inter-Domain Routing\">CIDR</abbr>-Notation: address/prefix"))
@@ -227,11 +243,15 @@
 	ip6addr.datatype = "ip6addr"
 	ip6addr:depends("proto", "static")
 	ip6addr:depends("proto", "6in4")
+  ip6addr:depends("proto", "meshif")
+  ip6addr:depends("proto", "apif")
 
 	ip6gw = s:taboption("ipv6", Value, "ip6gw", translate("<abbr title=\"Internet Protocol Version 6\">IPv6</abbr>-Gateway"))
 	ip6gw.optional = true
 	ip6gw.datatype = "ip6addr"
 	ip6gw:depends("proto", "static")
+  ip6gw:depends("proto", "meshif")
+  ip6gw:depends("proto", "apif")
 
 
 	ra = s:taboption("ipv6", Flag, "accept_ra", translate("Accept Router Advertisements"))
@@ -239,12 +259,16 @@
 	ra:depends("proto", "static")
 	ra:depends("proto", "dhcp")
 	ra:depends("proto", "none")
+  ra:depends("proto", "meshif")
+  ra:depends("proto", "apif")
 
 	rs = s:taboption("ipv6", Flag, "send_rs", translate("Send Router Solicitiations"))
 	rs.default = m.uci:get("network", arg[1], "proto") ~= "dhcp" and rs.enabled or rs.disabled
 	rs:depends("proto", "static")
 	rs:depends("proto", "dhcp")
 	rs:depends("proto", "none")
+  rs:depends("proto", "meshif")
+  rs:depends("proto", "apif")
 end
 
 dns = s:taboption("general", DynamicList, "dns", translate("<abbr title=\"Domain Name System\">DNS</abbr>-Server"),
@@ -259,6 +283,8 @@
 dns:depends({ peerdns = "", proto = "pppoe"  })
 dns:depends({ peerdns = "", proto = "pppoa"  })
 dns:depends({ peerdns = "", proto = "none"   })
+dns:depends({ peerdns = "", proto = "apif"   })
+dns:depends({ peerdns = "", proto = "meshif"   })
 
 mtu = s:taboption("physical", Value, "mtu", "MTU")
 mtu.optional = true
@@ -271,6 +297,8 @@
 mtu:depends("proto", "6in4")
 mtu:depends("proto", "6to4")
 mtu:depends("proto", "none")
+mtu:depends("proto", "meshif")
+mtu:depends("proto", "apif")
 
 srv = s:taboption("general", Value, "server", translate("<abbr title=\"Point-to-Point Tunneling Protocol\">PPTP</abbr>-Server"))
 srv:depends("proto", "pptp")
@@ -607,6 +635,29 @@
 	ltime:depends("proto", "ahcp")
 end
 
+if has_commotion then
+	reset = s:taboption("commotion", Flag, "reset", translate("Reset"), translate("Set the flag to regenerate configuration. IF SET, PLEASE RESTART ROUTER."))
+	reset.optional    = true
+	reset.enabled  = "1"
+	reset.disabled = "0"
+	reset.default  = reset.disabled
+	reset:depends("proto", "meshif")
+	reset:depends("proto", "apif")
+	
+  secure = s:taboption("commotion", Flag, "secure", translate("Secure"), translate("Set the flag to set this access point to use WPA when the configuration is reset."))
+	secure.optional    = true
+	secure.enabled  = "1"
+	secure.disabled = "0"
+	secure.default  = secure.disabled
+	secure:depends("proto", "apif")
+  
+  key = s:taboption("commotion", Value, "key", translate("WPA Key"), translate("Set the WPA key to be used for this interface when the configuration is reset."))
+	key.optional    = true
+  key.placeholder = "c0MM0t10N!"
+	key:depends("proto", "apif")
+	key:depends("secure", "1")
+end
+
 if net:proto() ~= "relay" then
 	s2 = m:section(TypedSection, "alias", translate("IP-Aliases"))
 	s2.addremove = true
